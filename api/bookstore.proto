syntax = "proto3";
option go_package = "/gen";

// --- Author Service ---

message Author {
    string id  = 1;
    string name  = 2;
    int64 date_of_birth = 3;
}

service AuthorService {
    rpc GetAuthors(GetAuthorsRequest) returns (GetAuthorsResponse);
    rpc GetAuthor(GetAuthorRequest) returns (GetAuthorResponse);
}

message GetAuthorsRequest {

}

message GetAuthorsResponse {
    repeated Author authors = 1;
}

message GetAuthorRequest {
    string id  = 1;
}

message GetAuthorResponse {
    Author author = 1;
}

// --- Book Service ---

message Book {
    string id = 1;
    string title = 2;
    string author_id = 3;
    string synopsis = 4;
    string image_url = 5;
    string genre = 6;
}

service BookService {
    rpc GetBooks(GetBooksRequest) returns (GetBooksResponse);
    rpc GetBook(GetBookRequest) returns (GetBookResponse);
}

message GetBooksRequest {
    string title = 1;
    string author_id = 2;
    string genre = 3;
}

message GetBooksResponse {
    repeated Book books = 1;
}

message GetBookRequest {
    string id  = 1;
}

message GetBookResponse {
    Book book = 1;
}

// -- User Service --

message User {
    string id = 1;
    string username = 2;
    string email = 3;
    string first_name = 4;
    string last_name = 5;
}

service UserService {
    rpc GetUser(GetUserRequest) returns (GetUserResponse);
    rpc LoginUser(LoginUserRequest) returns (LoginUserResponse);
    rpc ValidateUsernameUnique(ValidateUsernameUniqueRequest) returns (ValidateUsernameUniqueResponse);
}

message GetUserRequest {
    string id = 1;
}

message GetUserResponse {
    User user = 1;
}

message LoginUserRequest {
    string username = 1;
    string password = 2;
}

message LoginUserResponse {
    string username = 1;
    string email = 2;
}

message ValidateUsernameUniqueRequest {
    string username = 1;
}

message ValidateUsernameUniqueResponse {
    bool is_valid = 1;
}